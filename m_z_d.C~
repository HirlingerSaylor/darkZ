m_z_d(){

  Int_t   which        = 1;
  TString m_z_d_str[7] = { "0", "50", "75", "100", "125", "150", "500" }; 
  Float_t m_z_d    [7] = {  0.,  50.,  75.,  100.,  125.,  150.,  500.,};
  TString filename     = "moller_";

  filename.Append(m_z_d_str[which]);
  filename.Append(".root");

  cout << "Opening " << filename << " for processing." << endl;
  TFile* infile = new TFile(filename, "READ");
  infile->cd();
  cout << "Doing analysis for the case where m_z_d = " << m_z_d_str[which] << " MeV." << endl << endl;

  TString cuts = " rate / 1000000000 * ( hit.det == %d && hit.r > 0.03 ) / %f * (hit.pid == 11 ) ";
  cuts.Append( " * ( TMath::Abs(TMath::Abs(hit.ph % ( 360. / 7. )) - 360. / 14.) > 360. / 7. / 2. / 4. * %f ) " );
  cuts.Append( " * ( TMath::Abs(TMath::Abs(hit.ph % ( 360. / 7. )) - 360. / 14.) < 360. / 7. / 2. / 4. * %f ) " );
  cuts.Append( " * ( hit.r < %f ) * ( hit.r > %f ) " );

  Float_t lower_cuts[4] = { 0. , 0., 1., 3. };
  Float_t upper_cuts[4] = { 10., 1., 3., 4. };

  Float_t eemin[4]      = {0.935, 0.935, 0.96 , 0.96};
  Float_t eemax[4]      = {1.1  , 1.04 , 1.075, 1.1 };

  // One must do Form(cuts, detector number, bin size, lower_cuts, upper_cuts)
  
  TH1F* rate_E_hist      [4];
  TH1F* rate_th_hist     [4];
  TH1F* rate_Q2_hist     [4];
  TH1F* rate_r_hist      [4];
  TH1F* asymmetry_r_hist [4];

  TString section[4] = {"All", "Open", "Transition", "Closed"};

  for( Int_t i = 0; i < 4; i++ ) {

    TString rate_E_str      = "R(E) - ";
    TString rate_th_str     = "R(#theta) - ";
    TString rate_Q2_str     = "R(Q^{2}) - ";
    TString rate_r_str      = "R(r) - ";
    TString asymmetry_r_str = "A(r) - ";
    
    rate_E_str     .Append(section[i]);
    rate_th_str    .Append(section[i]);
    rate_Q2_str    .Append(section[i]);
    rate_r_str     .Append(section[i]);
    asymmetry_r_str.Append(section[i]);

    rate_E_hist[i]      = new TH1F(Form("rate_E_hist%d"     , i), rate_E_str     , 110, 0. , 11.); //in GHz / 0.1GeV vs GeV
    rate_th_hist[i]     = new TH1F(Form("rate_th_hist%d"    , i), rate_th_str    , 120, 0. , 25.); //in GHz / .25 mrad vs mrad
    rate_Q2_hist[i]     = new TH1F(Form("rate_Q2_hist%d"    , i), rate_Q2_str    , 150, 0. , 15.); //in GHz/100MeV vs GeV^2 * 10^-3
    rate_r_hist[i]      = new TH1F(Form("rate_r_hist%d"     , i), rate_r_str     , 120, 0.6, 1.5); //in GHz / cm vs m
    asymmetry_r_hist[i] = new TH1F(Form("asymmetry_r_hist%d", i), asymmetry_r_str, 120, 0.6, 1.5); //in ppb vs m

  }

  TCanvas* can = new TCanvas("can", "can", 20, 20, 1100, 700);
  can->Divide( 2, 2 );
  for( Int_t i = 0; i < 4; i++ ) {
    can->cd( i  + 1 );
    T->Draw(Form("hit.e         >> rate_E_hist%d", i )  , Form(cuts.Data(), 28, .1, lower_cuts[i], upper_cuts[i], eemin[i] eemax[i]), "");
  }

}
